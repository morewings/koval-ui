@import url("@/internal/inputs/stateSelectorsTextual.css");

.wrapper {
    --gap: var(--fg-size-unit);
    --validation-icon-placeholder: calc(var(--fg-size-unit) * 4 + var(--gap));

    align-items: center;
    display: flex;
    flex-direction: row;
    gap: var(--gap);
    max-width: 100%;
    width: 300px;

    & > div {
        flex: 0 1 auto;
    }
}

.input {
    appearance: textfield;
    background-color: var(--fg-color-mi);
    border: var(--fg-border-width-300) solid var(--fg-color-mi);
    border-radius: var(--fg-border-radius-300);
    color: var(--fg-text-color);
    flex-grow: 0;
    font-size: var(--fg-font-size-medium);
    max-width: calc(100% - var(--validation-icon-placeholder));
    min-width: 0;
    padding: var(--fg-size-unit) calc(var(--fg-size-unit) * 1.5);

    @supports (background: -webkit-named-image(i)) {
        width: calc(var(--size) * 1ch);
    }

    &:last-child {
        margin-right: var(--validation-icon-placeholder);
    }

    &::-webkit-inner-spin-button {
        appearance: none;
    }

    &::placeholder {
        color: var(--fg-color-fa);
        opacity: 0.66;
    }

    &:--readOnlySelector {
        background-color: var(--fg-color-mi);
        border: 3px solid var(--fg-color-do);
        user-select: all;
    }

    &:--disabledSelector {
        background-color: var(--fg-background-100);
        border-color: var(--fg-background-100);
        cursor: not-allowed;
    }

    &:--focusSelector::placeholder {
        color: transparent;
    }

    &:--focusSelector {
        background-color: var(--fg-background-000);
        border-color: var(--fg-color-re);
        outline: none;
    }

    &:--invalidSelector:focus {
        background-color: var(--fg-background-000);
        border-color: var(--fg-color-error);
    }
}

.spinner {
    align-items: center; /* center items horizontally, in this case */
    color: var(--fg-color-fa);
    cursor: pointer;
    display: flex;
    flex-direction: column; /* make flex direction vertical */
    flex-shrink: 0;
    height: calc(var(--fg-size-unit) * 6);
    justify-content: center; /* center items vertically, in this case */
    width: calc(var(--fg-size-unit) * 4);

    & svg {
        color: inherit;
        height: calc(var(--fg-size-unit) * 3);
        width: calc(var(--fg-size-unit) * 3);

        &:active {
            color: var(--fg-color-do);
        }
    }

    &:hover {
        color: var(--fg-color-re);
    }
}

.spinner:has(+ .input:--disabledSelector) {
    cursor: not-allowed;

    & svg {
        color: var(--fg-background-100);
        pointer-events: none;
    }
}

.spinner:has(+ .input:--invalidSelector):hover,
.spinner:has(+ .input:--invalidSelector:hover),
.spinner:has(+ .input:--invalidSelector:focus) {
    color: var(--fg-color-error);
}

.spinner:has(+ .input:--focusSelector) {
    color: var(--fg-color-do);
}

.spinner:has(+ .input:--hoverSelector) {
    color: var(--fg-color-re);
}

.validation {
    flex-shrink: 0;
}
